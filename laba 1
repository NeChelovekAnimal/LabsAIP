#include <iostream>
#include <cmath>
#include <stdexcept>
#include <string>


class CustomException : public std::exception {
private:
    std::string message;
    double value;
    int errorCode;

public:
    CustomException(const std::string& msg, double val, int code)
        : message(msg), value(val), errorCode(code) {}

    const char* what() const noexcept override {
        return message.c_str();
    }

    double getValue() const noexcept {
        return value;
    }

    int getErrorCode() const noexcept {
        return errorCode;
    }
};


void calculateZ1(double m, double& result) {
    if (m * m - 4 < 0) {
        throw CustomException("Корень из отрицательного числа", m, 1);
    }
    if (m + sqrt(m * m - 4) == 0) {
        throw CustomException("Деление на ноль", m, 2);
    }

    result = (sqrt(2 * m + 2 * sqrt(m * m - 4))) / (m + sqrt(m * m - 4) + 2);
}


void calculateZ2(double m, double& result) {
    if (m + 2 < 0) {
        throw CustomException("Корень из отрицательного числа", m, 1);
    }

    result = 1 / sqrt(m + 2);
}

int main() {
    double m;
    double Z1, Z2;

    std::cout << "Введите значение m: ";
    std::cin >> m;

    try {
        calculateZ1(m, Z1);
        calculateZ2(m, Z2);

        std::cout << "Z1 = " << Z1 << std::endl;
        std::cout << "Z2 = " << Z2 << std::endl;

        if (std::abs(Z1 - Z2) < 1e-5) {
            std::cout << "Значения Z1 и Z2 приблизительно равны." << std::endl;
        } else {
            std::cout << "Значения Z1 и Z2 различаются." << std::endl;
        }
    } catch (const CustomException& ex) {
        std::cerr << "Ошибка: " << ex.what() << std::endl;
        std::cerr << "Значение, вызвавшее ошибку: " << ex.getValue() << std::endl;
        std::cerr << "Код ошибки: " << ex.getErrorCode() << std::endl;
    }

    return 0;
}
