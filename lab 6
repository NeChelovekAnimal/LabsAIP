#include <SFML/Graphics.hpp>
#include <vector>
#include <iostream>

// Структура для хранения данных о прямоугольниках
struct Rectangle {
    sf::RectangleShape shape;
    sf::Color color;
};

int main() {
    // Размеры окна
    const int windowWidth = 800;
    const int windowHeight = 600;

    // Создаем окно
    sf::RenderWindow window(sf::VideoMode(windowWidth, windowHeight), "Рисование прямоугольников");

    // Контейнер для хранения прямоугольников
    std::vector<Rectangle> rectangles;

    // Переменные для рисования
    bool isDrawing = false;
    sf::Vector2f startPoint;
    sf::RectangleShape currentRectangle;

    // Основной цикл
    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            // Закрытие окна
            if (event.type == sf::Event::Closed) {
                window.close();
            }

            // Обработка нажатия мыши
            if (event.type == sf::Event::MouseButtonPressed) {
                if (event.mouseButton.button == sf::Mouse::Left) {
                    // Начало рисования
                    isDrawing = true;
                    startPoint = window.mapPixelToCoords(sf::Mouse::getPosition(window));
                    currentRectangle.setPosition(startPoint);
                    currentRectangle.setSize({0, 0});
                    currentRectangle.setFillColor(sf::Color::Transparent);
                    currentRectangle.setOutlineColor(sf::Color::Black);
                    currentRectangle.setOutlineThickness(1);
                }
            }

            // Обработка отпускания мыши
            if (event.type == sf::Event::MouseButtonReleased) {
                if (event.mouseButton.button == sf::Mouse::Left && isDrawing) {
                    // Завершение рисования
                    isDrawing = false;

                    // Сохраняем готовый прямоугольник
                    Rectangle newRect;
                    newRect.shape = currentRectangle;

                    // Генерация случайного цвета
                    newRect.color = sf::Color(rand() % 256, rand() % 256, rand() % 256);

                    newRect.shape.setFillColor(newRect.color);
                    rectangles.push_back(newRect);
                }
            }
        }

        // Рисование текущего прямоугольника при движении мыши
        if (isDrawing) {
            sf::Vector2f currentPoint = window.mapPixelToCoords(sf::Mouse::getPosition(window));
            sf::Vector2f size = currentPoint - startPoint;

            currentRectangle.setSize({std::abs(size.x), std::abs(size.y)});
            currentRectangle.setPosition(std::min(startPoint.x, currentPoint.x), std::min(startPoint.y, currentPoint.y));
        }

        // Отрисовка
        window.clear(sf::Color::White);

        // Рисуем все прямоугольники
        for (const auto &rect : rectangles) {
            window.draw(rect.shape);
        }

        // Рисуем текущий прямоугольник
        if (isDrawing) {
            window.draw(currentRectangle);
        }

        window.display();
    }

    return 0;
}
